---
- name: Deploy Telemedicine App
  hosts: local
  become: false
  vars_files:
    - vault/secrets.yml
  
  tasks:
    - name: Create project directory if it doesn't exist
      file:
        path: "/tmp/telemedicine-app"
        state: directory
        mode: '0755'
      
    - name: Clean existing deployments
      file:
        path: "/tmp/telemedicine-app"
        state: absent
      
    - name: Create fresh project directory
      file:
        path: "/tmp/telemedicine-app"
        state: directory
        mode: '0755'
      
    - name: Copy docker-compose.yml and .env to server
      copy:
        src: "{{ playbook_dir }}/../{{ item }}"
        dest: "/tmp/telemedicine-app/{{ item }}"
      with_items:
        - docker-compose.yml
      
    - name: Login to DockerHub
      command: docker login -u {{ docker_hub_username }} -p {{ docker_hub_password }}
      no_log: true
      
    - name: Create .env file
      copy:
        dest: "/tmp/telemedicine-app/.env"
        content: |
          MONGO_URI={{ mongo_uri }}
          JWT_SECRET={{ jwt_secret }}
          NODE_ENV=production
          CLOUDINARY_CLOUD_NAME={{ cloudinary_cloud_name }}
          CLOUDINARY_API_KEY={{ cloudinary_api_key }}
          CLOUDINARY_API_SECRET={{ cloudinary_api_secret }}
          DEFAULT_ADMIN_EMAIL={{ default_admin_email }}
          DEFAULT_ADMIN_PASSWORD={{ default_admin_password }}
          DOCKERHUB_USERNAME={{ docker_hub_username }}
          VERSION={{ version | default('latest') }}
        
    - name: Pull Docker images
      command: docker pull {{ docker_hub_username }}/{{ item }}:{{ version | default('latest') }}
      with_items:
        - telemedicine-backend
        - telemedicine-frontend
        
    - name: Start Docker containers
      command: docker compose up -d
      args:
        chdir: "/tmp/telemedicine-app"
      environment:
        DOCKERHUB_USERNAME: "{{ docker_hub_username }}"
        VERSION: "{{ version | default('latest') }}"
        
    - name: Wait for the application to start
      pause:
        seconds: 10
        
    - name: Verify containers are running
      command: docker ps
      register: docker_status
      
    - name: Show running containers
      debug:
        var: docker_status.stdout_lines